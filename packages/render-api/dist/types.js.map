{"version":3,"sources":["/Users/lixianjie/project/openSource/m78/packages/render-api/src/types.ts"],"sourcesContent":["import { createEvent } from '@m78/hooks';\nimport React from 'react';\nimport { AnyFunction } from '@m78/utils';\n\n/**\n * 一个更包容的组件接收器类型\n * */\nexport type ComponentType<P = any> = React.ComponentType<P> | AnyFunction;\n\n/**\n * 实现组件的标准props, 实现组件可以选择继承此接口(如果未自定义show/onChange的key)或RenderApiComponentBaseProps\n * */\nexport interface RenderApiComponentProps<S, I = null> extends RenderApiComponentBaseProps<S, I> {\n  /** 是否显示 */\n  show?: boolean;\n  /** show状态变更时通知父组件 */\n  onChange?: (cur: boolean) => void;\n}\n\n/**\n * 实现组件会接受的基础props, 实现组件可以以此类型作为基础props\n *\n * 变更此类型时应注意是否需要同步setStateWhiteList和_OmitBuiltState\n * */\nexport interface RenderApiComponentBaseProps<S, I = null> {\n  /** 通知上层组件销毁本组件的实例 */\n  onDispose?: () => void;\n  /**\n   * 更新state, 效果与RenderApiComponentInstance.setState相同, 区别是此回调由实现组件调用\n   * 使用此回调来通知外部组件更新传递给自身的state\n   * */\n  onUpdate?: RenderApiComponentInstance<S, I>['setState'];\n  /** 当需要对外暴露更多的api时使用, 将额外的api挂载到此ref */\n  instanceRef?: React.Ref<I>;\n}\n\n/**\n * create() 方法接收的配置对象\n *\n * 变更此类型时应注意是否需要更新updateOptionWhiteList\n * */\nexport interface RenderApiOption<S> {\n  /** 交由api渲染的组件，该组件接受RenderApiComponentProps */\n  component: ComponentType<RenderApiComponentBaseProps<any>>;\n  /** 默认state状态，会和render(state)时传入的state合并 */\n  defaultState?: Partial<RenderApiOmitBuiltState<S>>;\n  /** 包装组件，如果你的实现组件依赖于特定的布局，可以通过传递此项来包裹它们 */\n  wrap?: ComponentType;\n  /** 最大实例数，当渲染的组件数超过此数值时，会将最先进入的实例移除 */\n  maxInstance?: number;\n  /** 将实例渲染到指定命名空间的节点下, 而不是使用默认的渲染节点 */\n  namespace?: string;\n  /** 'show' | 自行定义控制组件显示/隐藏的props key */\n  showKey?: string;\n  /** 'onChange' | 自定义show变更进行通知的方法 */\n  changeKey?: string;\n  /** 用于在调用render时过滤掉一些不想接收的state, 会以返回的state传递给render(state) */\n  omitState?: (state: Partial<RenderApiOmitBuiltState<S>>) => Partial<RenderApiOmitBuiltState<S>>;\n}\n\n/** api实例，通过create()方法创建 */\nexport interface RenderApiInstance<S, I> {\n  /** 创建并渲染一个实例, 返回创建的实例 */\n  render: (state: RenderApiOmitBuiltState<S>) => RenderApiComponentInstance<S, I>;\n  /**\n   * 实例的挂载组件，一般会放在组件树的根节点下，并且应该避免其被延迟渲染\n   * - 此配置存在的目的是保证外部挂载的组件被解析到主react实例树中从而使得React context等api正常可用\n   * - 挂载位置与渲染位置无关，最终都会渲染到body下\n   * - 如果RenderTarget在第一次运行render时仍没有没渲染, 则会自动渲染到body下, 此时将不能再正常在渲染的组件内接收context等\n   * */\n  RenderTarget: ComponentType;\n  /** 关闭全部实例 */\n  hideAll: () => void;\n  /** 开启全部实例 */\n  showAll: () => void;\n  /** 销毁全部实例 */\n  disposeAll: () => void;\n  /** 获取所有实例的列表 */\n  getInstances: () => Array<RenderApiComponentInstance<S, I>>;\n  /** 可用事件对象 */\n  events: {\n    /** 实例发生可能会影响ui的改变时触发的事件 */\n    change: ReturnType<typeof createEvent>;\n  };\n  /**\n   * 更改create()时传入的配置, 只有白名单内的配置可以更改\n   * whiteList: ['defaultState', 'wrap', 'maxInstance']\n   * */\n  setOption: (\n    opt: Omit<RenderApiOption<S>, 'component' | 'namespace' | 'showKey' | 'changeKey'>,\n  ) => void;\n  /**\n   * 获取正在使用的配置副本\n   * */\n  getOption: () => RenderApiOption<S>;\n}\n\n/** render实例, 调用render()后生成 */\nexport interface RenderApiComponentInstance<S, I> {\n  /** 隐藏 */\n  hide: () => void;\n  /** 显示 */\n  show: () => void;\n  /** 销毁 */\n  dispose: () => void;\n  /** 渲染组件的state */\n  state: S;\n  /** 更新渲染组件的state */\n  setState: (nState: Partial<RenderApiOmitBuiltState<S>>) => void;\n  /**\n   * 存放组件内部对外暴露的属性和方法，由于组件渲染过程是异步的，所以此属性会延迟设置，如果实现组件未扩展任何东西则始终为null\n   * - 如果需要在render()执行后马上获取此实例, 请使用safe()并在其内部进行操作\n   * - 通常实现组件渲染的时间都非常的短, 除了在render后立刻访问, 直接使用instance.current访问实例也是可行的\n   * */\n  current: I;\n  /**\n   * 由于组件的渲染是异步的, current在创建render实例后并不能马上访问\n   * 此时可以通过safe调用来安全的访问实例, safe会在实例可用后立刻进行回调\n   * */\n  safe: (cb: () => void) => void;\n}\n\n/** 内部使用的实例的元信息 */\nexport interface _ComponentItem {\n  /** 组件/实例的唯一id */\n  id: string;\n  state: any;\n  instance: RenderApiComponentInstance<any, any>;\n  /** 更新标记, 用于最大程度的避免不需要的re-render */\n  updateFlag: number;\n}\n\n/**\n * 过滤调内部属性的state\n * */\nexport type RenderApiOmitBuiltState<S> = Omit<\n  S,\n  'show' | 'onChange' | 'onDispose' | 'onUpdate' | 'instanceRef'\n>;\n"],"names":["React"],"mappings":"AACA,OAAOA,KAAK,MAAM,OAAO,CAAC"}