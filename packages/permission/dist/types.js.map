{"version":3,"sources":["/Users/lixianjie/project/openSource/m78/packages/permission/src/types.ts"],"sourcesContent":["import { AnyObject } from '@lxjx/utils';\nimport { Seed } from '@m78/seed';\n\n/**\n * 验证失败时提供给用户的一组操作(仅作为约定，可以根据需要扩展)\n * */\n// export interface Action {\n//   /** 操作名称 */\n//   label: string;\n//   /** 可以扩展异常处理方法(handler)，渲染类型(link)等，帮助控制具体的显示 */\n//   [key: string]: any;\n// }\n\n/** 验证器返回的结果 */\nexport interface ValidMeta {\n  /** 该权限名称 */\n  label: string;\n  /** 可以扩展异常处理方法(handler)，渲染类型(link)等，帮助控制具体的显示 */\n  [key: string]: any;\n  // /** 该权限的文字描述 */\n  // desc?: string;\n  // /** 验证失败时提供给用户的一组操作 */\n  // actions?: Action[];\n}\n\n/** 验证器, 一旦验证器返回了ValidMeta则该次验证视为不通过 */\nexport interface Validator<S> {\n  (state: S, extra?: any): ValidMeta | void;\n}\n\nexport interface Validators<S = AnyObject> {\n  [key: string]: Validator<S>;\n}\n\n/** 用于验证的keys */\nexport type PermissionKeys<V, C = AnyObject> = Array<keyof (V & C) | Array<keyof (V & C)>>;\n\nexport interface PermissionConfig<S = AnyObject> {\n  /** 传递给验证器的额外参数, 比如用户id */\n  extra?: any;\n  /** 局部验证器 */\n  validators?: Validators<S>;\n}\n\n/**\n * Permission实例\n * */\nexport interface Permission<S = AnyObject, V = AnyObject> {\n  /**\n   * @param keys - 所属权限, 如果数组项为数组则表示逻辑 `or`\n   * @return validMeta - 验证结果，如果验证通过则为null\n   * */\n  (keys: PermissionKeys<V>): ValidMeta[] | null;\n  /**\n   * @param keys - 所属权限, 如果数组项为数组则表示逻辑 `or`\n   * @param config - 配置\n   * @return validMeta - 验证结果，如果验证通过则为null\n   * */\n  (keys: PermissionKeys<V>, config: PermissionConfig<S>): ValidMeta[] | null;\n  /** 由配置传入的seed的原样导出 */\n  seed: Seed;\n}\n\n/**\n * Permission创建配置\n * */\nexport interface CreatePermissionConfig<S = any, V = any> {\n  /** 用于控制内部状态的seed */\n  seed: Seed<S>;\n  /** 待注册的验证器 */\n  validators?: V;\n  /**\n   * 如果一个验证未通过，则阻止后续验证\n   * * 对于or中的子权限，即使开启了validFirst，依然会对每一项进行验证，但是只会返回第一个\n   * * 在执行check()时将优先级更高的权限key放到前面有助于提高验证反馈的精度, 如 login > publisher, 因为publisher状态是以login为前提的\n   *  */\n  validFirst?: boolean;\n}\n\n/**\n * 实例创建器\n * */\nexport interface PermissionCreator {\n  <S extends AnyObject = AnyObject, V extends Validators<S> = Validators<S>>(\n    conf: CreatePermissionConfig<S, V>,\n  ): Permission<S, V>;\n}\n"],"names":[],"mappings":"AAAA,WAsFC"}