{"version":3,"sources":["/Users/lixianjie/project/openSource/m78/packages/utils/src/date.ts"],"sourcesContent":["import { padSingleNumber } from \"./format.js\";\nimport { DATE_TIME_FORMAT } from \"./consts.js\";\nimport { throwError } from \"./lang.js\";\n\n/**\n * Receive a date string, timestamp (ms), date object, and return it after converting it into a date object, or return null if the conversion fail\n *  */\nexport function parseDate(date: any): Date | null {\n  let d = date;\n  if (typeof date === \"string\") {\n    d = date.replace(/-/g, \"/\"); // Safari无法解析 2020-01-01 格式的日期\n  }\n  d = new Date(d);\n\n  // 处理Invalid Date\n  if (d instanceof Date && isNaN(d.getTime())) {\n    return null;\n  }\n\n  return d;\n}\n\n/**\n * format the date into readable date string, support YY | YYYY | MM | DD | HH | mm | ss\n * @param date - new Date() | any time val (string/date object/timestamp etc.) that can be parsed by parseDate(), default current time\n * @param format - 'YYYY-MM-DD HH:mm:ss' | custom format\n * @return - formatted date string, if date is invalid, return an empty string\n * @example\n datetime(); // => 2020-06-01 18:45:57\n datetime('2020-06-01 15:30:30', 'hh时mm分 YYYY年MM月'); // => 15时30分 2020年06月\n datetime(1591008308782, 'YY年MM月DD日'); // => 21年06月01日\n datetime('1591008308782'); // => ''\n datetime('hello'); // => ''\n datetime(new Date()); // => 2020-06-01 18:46:39\n */\nexport function formatDate(date: any = new Date(), format = DATE_TIME_FORMAT) {\n  const d = parseDate(date);\n\n  if (!d) {\n    return \"\";\n  }\n\n  const fn = (d) => {\n    return (\"0\" + d).slice(-2);\n  };\n\n  const formats = {\n    YY: String(d.getFullYear() + 1).slice(2),\n    YYYY: d.getFullYear(),\n    MM: fn(d.getMonth() + 1),\n    DD: fn(d.getDate()),\n    HH: fn(d.getHours()),\n    mm: fn(d.getMinutes()),\n    ss: fn(d.getSeconds()),\n  };\n\n  return format.replace(/([a-z])\\1+/gi, (a) => {\n    return formats[a] || a;\n  });\n}\n\nconst oneMS = 100;\nconst oneS = oneMS * 10;\nconst oneM = 60 * oneS;\nconst oneH = 60 * oneM;\nconst oneD = 24 * oneH;\n\n/**\n * get d day, h hour, m minute, s second, ms millisecond between the current time and the specified time. If the current time exceeds the incoming time, all return to '00' and timeOut is true\n * @param date - any time that can be parsed by parseDate()\n * @return count data\n */\nexport function getDateCountDown(date?: any) {\n  const dt = parseDate(date);\n\n  if (!dt) {\n    return {\n      ms: \"00\",\n      s: \"00\",\n      m: \"00\",\n      h: \"00\",\n      d: \"00\",\n      timeOut: true,\n    };\n  }\n\n  const start = Date.now();\n  const end = dt.getTime();\n\n  const diff = end - start;\n\n  if (diff < 0) {\n    return getDateCountDown();\n  }\n\n  const fr = Math.floor;\n\n  // h、m、s 用单位总数取余就是该单位对应的ms，除单位总数获得单位\n  const d = fr(diff / oneD);\n  const h = fr((diff % oneD) / oneH);\n  const m = fr((diff % oneH) / oneM);\n  const s = fr((diff % oneM) / oneS);\n  const ms = fr(diff % oneMS);\n\n  return {\n    d: padSingleNumber(d),\n    h: padSingleNumber(h),\n    m: padSingleNumber(m),\n    s: padSingleNumber(s),\n    ms: padSingleNumber(ms),\n    timeOut: false,\n  };\n}\n\n/**\n * return true if date is between targetDate\n * */\nexport function isBetweenDate(opt: {\n  /** start time, default current, receive all time formats supported by parseDate() */\n  startDate: any;\n  /** end time, default current, receive all time formats supported by parseDate() */\n  endDate: any;\n  /** target time, default current, receive all time formats supported by parseDate() */\n  targetDate: any;\n  /** true | include startDate = targetDate  */\n  startSame?: boolean;\n  /** true | include endDate = targetDate */\n  endSame?: boolean;\n}) {\n  const { startSame = true, endSame = true } = opt;\n\n  const s = parseDate(opt.startDate);\n  const e = parseDate(opt.endDate);\n  const t = parseDate(opt.targetDate) || new Date();\n\n  if (!s || !e) return false;\n\n  const start = s.getTime();\n  const end = e.getTime();\n  const target = t.getTime();\n\n  if (startSame && endSame) {\n    return target <= end && target >= start;\n  }\n\n  if (!startSame && !endSame) {\n    return target < end && target > start;\n  }\n\n  if (startSame) {\n    return target < end && target >= start;\n  } else {\n    return target <= end && target > start;\n  }\n}\n\nexport interface IsAfterAndBeforeOption {\n  /** time to be comparing, receive all time formats supported by parseDate() */\n  date: any;\n  /** target time, default current, receive all time formats supported by parseDate() */\n  targetDate?: any;\n  /** when date = targetDate, return true */\n  same?: boolean;\n}\n\n/**\n * return true if date is after targetDate\n * */\nexport function isAfterDate(opt: IsAfterAndBeforeOption): boolean {\n  return isAfterOrBeforeHelper(opt);\n}\n\n/**\n * return true if date is before targetDate\n * */\nexport function isBeforeDate(opt: IsAfterAndBeforeOption): boolean {\n  return isAfterOrBeforeHelper(opt, true);\n}\n\n/**\n * create a time Reviser according to the specified time for revise the difference between local time and server time\n * */\nexport function createDateReviser(date: any) {\n  const d = parseDate(date);\n\n  if (!d) {\n    throwError(`${date} cannot be safety covert to Date`);\n  }\n\n  const diff = d.getTime() - new Date().getTime();\n\n  return {\n    /** argument date */\n    date: d,\n    /** local date and arg date diff (ms) */\n    diff,\n    /** revised current date */\n    getReviseCurrent() {\n      return this.getReviseDate(new Date());\n    },\n    /** revise specify date */\n    getReviseDate(d: any) {\n      const _date = parseDate(d);\n      if (!_date) {\n        throwError(`${d} cannot be safety covert to Date`);\n      }\n      _date.setTime(_date.getTime() + diff);\n      return _date;\n    },\n  };\n}\n\n/**\n * isAfterDate and isBeforeDate common logic\n * */\nfunction isAfterOrBeforeHelper(\n  opt: IsAfterAndBeforeOption,\n  isBefore?: boolean\n): boolean {\n  const date = parseDate(opt.date);\n  if (!date) return false;\n  const targetDate = parseDate(opt.targetDate) || new Date();\n\n  if (opt.same) {\n    if (isBefore) return date.getTime() <= targetDate.getTime();\n    return date.getTime() >= targetDate.getTime();\n  }\n\n  if (isBefore) return date.getTime() < targetDate.getTime();\n  return date.getTime() > targetDate.getTime();\n}\n"],"names":["padSingleNumber","DATE_TIME_FORMAT","throwError","parseDate","date","d","replace","Date","isNaN","getTime","formatDate","format","fn","slice","formats","YY","String","getFullYear","YYYY","MM","getMonth","DD","getDate","HH","getHours","mm","getMinutes","ss","getSeconds","a","oneMS","oneS","oneM","oneH","oneD","getDateCountDown","dt","ms","s","m","h","timeOut","start","now","end","diff","fr","Math","floor","isBetweenDate","opt","startSame","endSame","startDate","e","endDate","t","targetDate","target","isAfterDate","isAfterOrBeforeHelper","isBeforeDate","createDateReviser","getReviseCurrent","getReviseDate","_date","setTime","isBefore","same"],"mappings":"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"}