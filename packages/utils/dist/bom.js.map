{"version":3,"sources":["/Users/lixianjie/project/openSource/m78/packages/utils/src/bom.ts"],"sourcesContent":["const storagePrefix = \"UTIL_STORAGE_\";\n\n/** shortcut to the localStorage api, including automatic JSON.stringify and a spliced unique prefix */\nexport function setStorage(key: string, val: any) {\n  localStorage.setItem(\n    `${storagePrefix}${key}`.toUpperCase(),\n    JSON.stringify(val)\n  );\n}\n\n/** shortcut of localStorage api, automatic JSON.parse, can only take the value set by setStorage */\nexport function getStorage(key: string) {\n  const s = localStorage.getItem(`${storagePrefix}${key}`.toUpperCase());\n\n  if (!s) return null;\n\n  return JSON.parse(s);\n}\n\nlet cachePlatform: {\n  mac: boolean;\n  iphone: boolean;\n  ipad: boolean;\n  windows: boolean;\n  android: boolean;\n  linux: boolean;\n} | null = null;\n\n/** get os platform */\nexport function getPlatform() {\n  if (cachePlatform) return { ...cachePlatform };\n\n  const getPlatform = () => {\n    // 2022 way of detecting. Note : this userAgentData feature is available only in secure contexts (HTTPS)\n    if (\n      // @ts-ignore\n      typeof navigator.userAgentData !== \"undefined\" &&\n      // @ts-ignore\n      navigator.userAgentData != null\n    ) {\n      // @ts-ignore\n      return navigator.userAgentData.platform;\n    }\n    // Deprecated but still works for most of the browser\n    if (typeof navigator.platform !== \"undefined\") {\n      if (\n        typeof navigator.userAgent !== \"undefined\" &&\n        /android/.test(navigator.userAgent.toLowerCase())\n      ) {\n        // android device’s navigator.platform is often set as 'linux', so let’s use userAgent for them\n        return \"android\";\n      }\n      return navigator.platform;\n    }\n    return \"unknown\";\n  };\n\n  const platform = getPlatform();\n\n  cachePlatform = {\n    mac: /mac/.test(platform),\n    iphone: /(iphone|ipod)/.test(platform),\n    ipad: /ipad/.test(platform),\n    windows: /win/.test(platform),\n    android: /android/.test(platform),\n    linux: /linux/.test(platform),\n  };\n\n  return cachePlatform;\n}\n"],"names":["storagePrefix","setStorage","key","val","localStorage","setItem","toUpperCase","JSON","stringify","getStorage","s","getItem","parse","cachePlatform","getPlatform","navigator","userAgentData","platform","userAgent","test","toLowerCase","mac","iphone","ipad","windows","android","linux"],"mappings":"AAAA;AAAA,IAAMA,aAAa,GAAG,eAAe,AAAC;AAEtC,qGAAqG,GACrG,OAAO,SAASC,UAAU,CAACC,GAAW,EAAEC,GAAQ,EAAE;IAChDC,YAAY,CAACC,OAAO,CAClB,AAAC,EAAA,CAAkBH,MAAG,CAAnBF,aAAa,CAAO,CAAA,MAAA,CAAJE,GAAG,CAAE,CAACI,WAAW,EAAE,EACtCC,IAAI,CAACC,SAAS,CAACL,GAAG,CAAC,CACpB,CAAC;AACJ,CAAC;AAED,kGAAkG,GAClG,OAAO,SAASM,UAAU,CAACP,GAAW,EAAE;IACtC,IAAMQ,CAAC,GAAGN,YAAY,CAACO,OAAO,CAAC,AAAC,EAAA,CAAkBT,MAAG,CAAnBF,aAAa,CAAO,CAAA,MAAA,CAAJE,GAAG,CAAE,CAACI,WAAW,EAAE,CAAC,AAAC;IAEvE,IAAI,CAACI,CAAC,EAAE,OAAO,IAAI,CAAC;IAEpB,OAAOH,IAAI,CAACK,KAAK,CAACF,CAAC,CAAC,CAAC;AACvB,CAAC;AAED,IAAIG,aAAa,GAON,IAAI,AAAC;AAEhB,oBAAoB,GACpB,OAAO,SAASC,WAAW,GAAG;IAC5B,IAAID,aAAa,EAAE,OAAO,mBAAKA,aAAa,CAAE,CAAC;IAE/C,IAAMC,WAAW,GAAG,WAAM;QACxB,wGAAwG;QACxG,IACE,aAAa;QACb,OAAOC,SAAS,CAACC,aAAa,KAAK,WAAW,IAC9C,aAAa;QACbD,SAAS,CAACC,aAAa,IAAI,IAAI,EAC/B;YACA,aAAa;YACb,OAAOD,SAAS,CAACC,aAAa,CAACC,QAAQ,CAAC;QAC1C,CAAC;QACD,qDAAqD;QACrD,IAAI,OAAOF,SAAS,CAACE,QAAQ,KAAK,WAAW,EAAE;YAC7C,IACE,OAAOF,SAAS,CAACG,SAAS,KAAK,WAAW,IAC1C,UAAUC,IAAI,CAACJ,SAAS,CAACG,SAAS,CAACE,WAAW,EAAE,CAAC,EACjD;gBACA,+FAA+F;gBAC/F,OAAO,SAAS,CAAC;YACnB,CAAC;YACD,OAAOL,SAAS,CAACE,QAAQ,CAAC;QAC5B,CAAC;QACD,OAAO,SAAS,CAAC;IACnB,CAAC,AAAC;IAEF,IAAMA,QAAQ,GAAGH,WAAW,EAAE,AAAC;IAE/BD,aAAa,GAAG;QACdQ,GAAG,EAAE,MAAMF,IAAI,CAACF,QAAQ,CAAC;QACzBK,MAAM,EAAE,gBAAgBH,IAAI,CAACF,QAAQ,CAAC;QACtCM,IAAI,EAAE,OAAOJ,IAAI,CAACF,QAAQ,CAAC;QAC3BO,OAAO,EAAE,MAAML,IAAI,CAACF,QAAQ,CAAC;QAC7BQ,OAAO,EAAE,UAAUN,IAAI,CAACF,QAAQ,CAAC;QACjCS,KAAK,EAAE,QAAQP,IAAI,CAACF,QAAQ,CAAC;KAC9B,CAAC;IAEF,OAAOJ,aAAa,CAAC;AACvB,CAAC"}