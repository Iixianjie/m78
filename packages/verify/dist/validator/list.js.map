{"version":3,"sources":["/Users/lixianjie/project/openSource/m78/packages/verify/src/validator/list.ts"],"sourcesContent":["import { Meta, Validator } from \"../types\";\nimport { array } from \"./array\";\n\nexport enum ListValidatorType {\n  contain = \"contain\",\n  equal = \"equal\",\n}\n\ninterface ListValidatorOpt {\n  /** 两个列表的覆盖类型, contain - 包含  equal - 完全相等  */\n  type: ListValidatorType;\n  /** 如果项是对象等特殊类型, 可以通过此项提取对应的值, 如:  item => item.id, 不影响list中的选项 */\n  collector?: (item: any) => any;\n  /** 用于对比的项 */\n  list: any[];\n}\n\nexport const listValidatorKey = \"verifyList\";\n\n/**\n * 检测两个集合的覆盖类型, 比如数组值是否包含另list中的所有项, 是否与list完全相等\n * */\nexport function list(opt: ListValidatorOpt) {\n  const listValidator: Validator = (meta: Meta) => {\n    const tpl = meta.config.languagePack.list;\n\n    const e = array()(meta);\n\n    if (e) return e;\n\n    const ls = opt.collector ? meta.value.map(opt.collector) : meta.value;\n\n    const miss = opt.list.filter((i: any) => ls.indexOf(i) === -1);\n\n    if (opt.type === ListValidatorType.contain) {\n      if (miss.length) {\n        return {\n          errorTemplate: tpl.miss,\n          interpolateValues: {\n            miss,\n          },\n        };\n      }\n    }\n\n    if (opt.type === ListValidatorType.equal) {\n      if (ls.length !== opt.list.length) {\n        return tpl.diffLength;\n      }\n\n      // 长度相等的情况下, 只会少于不会多于\n      if (miss.length) {\n        return {\n          errorTemplate: tpl.miss,\n          interpolateValues: {\n            miss,\n          },\n        };\n      }\n    }\n  };\n\n  listValidator.key = listValidatorKey;\n\n  return listValidator;\n}\n"],"names":["array","ListValidatorType","contain","equal","listValidatorKey","list","opt","listValidator","meta","tpl","config","languagePack","e","ls","collector","value","map","miss","filter","i","indexOf","type","length","errorTemplate","interpolateValues","diffLength","key"],"mappings":"AACA,SAASA,KAAK,QAAQ,SAAS,CAAC;WAEzB,iBAGN;UAHWC,iBAAiB;IAAjBA,iBAAiB,CAC3BC,SAAO,IAAPA,SAAO;IADGD,iBAAiB,CAE3BE,OAAK,IAALA,OAAK;GAFKF,iBAAiB,KAAjBA,iBAAiB;AAc7B,OAAO,IAAMG,gBAAgB,GAAG,YAAY,CAAC;AAE7C;;GAEG,GACH,OAAO,SAASC,IAAI,CAACC,GAAqB,EAAE;IAC1C,IAAMC,aAAa,GAAc,SAACC,IAAU,EAAK;QAC/C,IAAMC,GAAG,GAAGD,IAAI,CAACE,MAAM,CAACC,YAAY,CAACN,IAAI,AAAC;QAE1C,IAAMO,CAAC,GAAGZ,KAAK,EAAE,CAACQ,IAAI,CAAC,AAAC;QAExB,IAAII,CAAC,EAAE,OAAOA,CAAC,CAAC;QAEhB,IAAMC,EAAE,GAAGP,GAAG,CAACQ,SAAS,GAAGN,IAAI,CAACO,KAAK,CAACC,GAAG,CAACV,GAAG,CAACQ,SAAS,CAAC,GAAGN,IAAI,CAACO,KAAK,AAAC;QAEtE,IAAME,IAAI,GAAGX,GAAG,CAACD,IAAI,CAACa,MAAM,CAAC,SAACC,CAAM;mBAAKN,EAAE,CAACO,OAAO,CAACD,CAAC,CAAC,KAAK,CAAC,CAAC;SAAA,CAAC,AAAC;QAE/D,IAAIb,GAAG,CAACe,IAAI,KAAKpB,iBAAiB,CAACC,OAAO,EAAE;YAC1C,IAAIe,IAAI,CAACK,MAAM,EAAE;gBACf,OAAO;oBACLC,aAAa,EAAEd,GAAG,CAACQ,IAAI;oBACvBO,iBAAiB,EAAE;wBACjBP,IAAI,EAAJA,IAAI;qBACL;iBACF,CAAC;YACJ,CAAC;QACH,CAAC;QAED,IAAIX,GAAG,CAACe,IAAI,KAAKpB,iBAAiB,CAACE,KAAK,EAAE;YACxC,IAAIU,EAAE,CAACS,MAAM,KAAKhB,GAAG,CAACD,IAAI,CAACiB,MAAM,EAAE;gBACjC,OAAOb,GAAG,CAACgB,UAAU,CAAC;YACxB,CAAC;YAED,qBAAqB;YACrB,IAAIR,IAAI,CAACK,MAAM,EAAE;gBACf,OAAO;oBACLC,aAAa,EAAEd,GAAG,CAACQ,IAAI;oBACvBO,iBAAiB,EAAE;wBACjBP,IAAI,EAAJA,IAAI;qBACL;iBACF,CAAC;YACJ,CAAC;QACH,CAAC;IACH,CAAC,AAAC;IAEFV,aAAa,CAACmB,GAAG,GAAGtB,gBAAgB,CAAC;IAErC,OAAOG,aAAa,CAAC;AACvB,CAAC"}