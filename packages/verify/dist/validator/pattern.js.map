{"version":3,"sources":["/Users/lixianjie/project/openSource/m78/packages/verify/src/validator/pattern.ts"],"sourcesContent":["import { isRegExp, isString } from \"@m78/utils\";\nimport { Meta, Validator } from \"../types\";\n\nexport const patternValidatorKey = \"verifyPattern\";\n\n/**\n * 必须通过指定的正则校验, regexp可以是正则字符或正则对象\n * */\nexport const pattern = (regexp: string | RegExp, tpl?: string) => {\n  const patternValidator: Validator = ({ value, config }: Meta) => {\n    let reg = regexp;\n\n    if (isString(reg)) {\n      reg = new RegExp(reg);\n    }\n\n    if (!isRegExp(reg)) return;\n\n    if (!(reg as RegExp).test(value)) {\n      return {\n        errorTemplate: tpl || config.languagePack.pattern,\n        interpolateValues: {\n          regexp: reg.toString(),\n        },\n      };\n    }\n  };\n\n  patternValidator.key = patternValidatorKey;\n\n  return patternValidator;\n};\n"],"names":["isRegExp","isString","patternValidatorKey","pattern","regexp","tpl","patternValidator","value","config","reg","RegExp","test","errorTemplate","languagePack","interpolateValues","toString","key"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,QAAQ,QAAQ,YAAY,CAAC;AAGhD,OAAO,IAAMC,mBAAmB,GAAG,eAAe,CAAC;AAEnD;;GAEG,GACH,OAAO,IAAMC,OAAO,GAAG,SAACC,MAAuB,EAAEC,GAAY,EAAK;IAChE,IAAMC,gBAAgB,GAAc,gBAA6B;YAA1BC,KAAK,SAALA,KAAK,EAAEC,MAAM,SAANA,MAAM;QAClD,IAAIC,GAAG,GAAGL,MAAM,AAAC;QAEjB,IAAIH,QAAQ,CAACQ,GAAG,CAAC,EAAE;YACjBA,GAAG,GAAG,IAAIC,MAAM,CAACD,GAAG,CAAC,CAAC;QACxB,CAAC;QAED,IAAI,CAACT,QAAQ,CAACS,GAAG,CAAC,EAAE,OAAO;QAE3B,IAAI,CAAC,AAACA,GAAG,CAAYE,IAAI,CAACJ,KAAK,CAAC,EAAE;YAChC,OAAO;gBACLK,aAAa,EAAEP,GAAG,IAAIG,MAAM,CAACK,YAAY,CAACV,OAAO;gBACjDW,iBAAiB,EAAE;oBACjBV,MAAM,EAAEK,GAAG,CAACM,QAAQ,EAAE;iBACvB;aACF,CAAC;QACJ,CAAC;IACH,CAAC,AAAC;IAEFT,gBAAgB,CAACU,GAAG,GAAGd,mBAAmB,CAAC;IAE3C,OAAOI,gBAAgB,CAAC;AAC1B,CAAC,CAAC"}