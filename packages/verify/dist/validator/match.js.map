{"version":3,"sources":["/Users/lixianjie/project/openSource/m78/packages/verify/src/validator/match.ts"],"sourcesContent":["import { Meta, Validator } from \"../types\";\nimport { string } from \"./string\";\n\nexport const matchValidatorKey = \"verifyMatch\";\n\n/**\n * 将字符串值与给的字符串或正则匹配, 如果字符串值包含给定的字符或正则模式则视为通过\n * */\nexport function match(keyword: string | RegExp) {\n  const matchValidator: Validator = (meta: Meta) => {\n    const tpl = meta.config.languagePack.match;\n\n    const e = string()(meta);\n\n    if (e) return e;\n\n    // 先进行字符匹配, 因为().会对匹配结果造成干扰, 字符不能匹配时 才走正则匹配\n    if (meta.value.includes(keyword)) return;\n\n    const reg = new RegExp(keyword);\n\n    if (reg.test(meta.value)) return;\n\n    return {\n      errorTemplate: tpl,\n      interpolateValues: {\n        keyword,\n      },\n    };\n  };\n\n  matchValidator.key = matchValidatorKey;\n\n  return matchValidator;\n}\n"],"names":["string","matchValidatorKey","match","keyword","matchValidator","meta","tpl","config","languagePack","e","value","includes","reg","RegExp","test","errorTemplate","interpolateValues","key"],"mappings":"AACA,SAASA,MAAM,QAAQ,UAAU,CAAC;AAElC,OAAO,IAAMC,iBAAiB,GAAG,aAAa,CAAC;AAE/C;;GAEG,GACH,OAAO,SAASC,KAAK,CAACC,OAAwB,EAAE;IAC9C,IAAMC,cAAc,GAAc,SAACC,IAAU,EAAK;QAChD,IAAMC,GAAG,GAAGD,IAAI,CAACE,MAAM,CAACC,YAAY,CAACN,KAAK,AAAC;QAE3C,IAAMO,CAAC,GAAGT,MAAM,EAAE,CAACK,IAAI,CAAC,AAAC;QAEzB,IAAII,CAAC,EAAE,OAAOA,CAAC,CAAC;QAEhB,2CAA2C;QAC3C,IAAIJ,IAAI,CAACK,KAAK,CAACC,QAAQ,CAACR,OAAO,CAAC,EAAE,OAAO;QAEzC,IAAMS,GAAG,GAAG,IAAIC,MAAM,CAACV,OAAO,CAAC,AAAC;QAEhC,IAAIS,GAAG,CAACE,IAAI,CAACT,IAAI,CAACK,KAAK,CAAC,EAAE,OAAO;QAEjC,OAAO;YACLK,aAAa,EAAET,GAAG;YAClBU,iBAAiB,EAAE;gBACjBb,OAAO,EAAPA,OAAO;aACR;SACF,CAAC;IACJ,CAAC,AAAC;IAEFC,cAAc,CAACa,GAAG,GAAGhB,iBAAiB,CAAC;IAEvC,OAAOG,cAAc,CAAC;AACxB,CAAC"}