{"version":3,"sources":["/Users/lixianjie/project/openSource/m78/packages/seed/src/cacheMiddleware.ts"],"sourcesContent":["import { isFunction, isNumber, isObject } from '@lxjx/utils';\nimport { Middleware } from './types';\n\nconst PREFIX = 'SEED_CACHE_';\n\nexport interface CacheMiddlewareConf {\n  /**\n   * expire time (ms) for performance reasons, only check for expiration during initialization\n   *\n   * 过期时间(ms), 出于性能考虑，只会在初始化阶段检测是否过期\n   * */\n  expire?: number;\n  /**\n   * true | whether to flush the expiration time when reading the cache before expiration\n   *\n   * true | 在过期前读取缓存时，是否刷新过期时间\n   * */\n  expireRefresh?: boolean;\n  /**\n   * session | cache type, the key can be the same\n   *\n   * session | 缓存类型，不共享缓存key\n   * */\n  type?: 'session' | 'local';\n  /**\n   * cache all keys by default. Set this to enable caching for a specified key\n   *\n   * 默认缓存全部key，设置此项来开启指定key的缓存\n   * */\n  testKey?: (key: string) => boolean; // 验证通过的值进行缓存\n  /**\n   * trigger when the cache expires or invalidated\n   *\n   * 缓存过期或失效时触发\n   * */\n  onExpire?: () => void;\n}\n\nexport const defaultConf = {\n  type: 'session',\n  expireRefresh: true,\n};\n\ntype InnerConf = CacheMiddlewareConf & typeof defaultConf;\n\n/**\n * 在state每次变更时，将其缓存，并在下次初始化时还原\n * @param key - cache key\n * @param conf\n * */\nexport default function cache(key: string, conf?: CacheMiddlewareConf) {\n  const config = {\n    ...defaultConf,\n    ...conf,\n  } as InnerConf;\n\n  const { expire } = config;\n\n  const k = `${PREFIX}${config.type}_${key}`.toUpperCase();\n\n  const expireKey = `${k}_EXPIRE`;\n\n  const storage = getStorageObj(config);\n\n  if (!storage) return;\n\n  if (config.expire) checkExpire(k, expireKey, storage, config);\n\n  const cacheMiddleware: Middleware = bonus => {\n    if (bonus.init) {\n      const _conf = bonus.config;\n\n      const cacheData = get(k, storage);\n\n      if (!cacheData) return _conf;\n\n      return { ..._conf, state: { ..._conf.state, ...cacheData } };\n    }\n\n    bonus.apis.subscribe(() => {\n      set(k, bonus.apis.get(), storage, config);\n\n      if (isNumber(expire) && expire > 0) {\n        setExpire(expireKey, storage, config);\n      }\n    });\n  };\n\n  return cacheMiddleware;\n}\n\nfunction get(key: string, storage: Storage) {\n  const cData = storage.getItem(key);\n\n  if (!cData) return;\n\n  const parseData = JSON.parse(cData);\n\n  if (!isObject(parseData)) return;\n\n  return parseData;\n}\n\nfunction set(key: string, val: any, storage: Storage, config: InnerConf) {\n  if (!val) return;\n\n  let cacheObj: any = {};\n\n  if (isFunction(config.testKey)) {\n    Object.entries(val).forEach(([k, v]) => {\n      if (config.testKey!(k)) {\n        cacheObj[k] = v;\n      }\n    });\n  } else {\n    cacheObj = val;\n  }\n\n  storage.setItem(key, JSON.stringify(cacheObj));\n}\n\n/** 设置缓存时间，默认只在未设置时设置，开启expireRefresh后在每一次执行时更新缓存 */\nfunction setExpire(expireKey: string, storage: Storage, config: InnerConf) {\n  const exT = storage.getItem(expireKey);\n\n  if (exT && !config.expireRefresh) return;\n  if (!config.expire) return;\n\n  // 在第一次缓存时间\n  storage.setItem(expireKey, String(Date.now() + config.expire));\n}\n\n/** 检测缓存有效性，过期时删除缓存，启用expireRefresh且未过期时刷新缓存, 否则不执行操作 */\nfunction checkExpire(k: string, expireKey: string, storage: Storage, config: InnerConf) {\n  const exT = storage.getItem(expireKey);\n\n  if (!exT) return;\n\n  // 已过期\n  if (Date.now() > Number(exT)) {\n    config.onExpire?.();\n    storage.removeItem(k);\n    storage.removeItem(expireKey);\n  } else if (config.expireRefresh) {\n    // 未过期, 刷新缓存时间\n    config.expire && setExpire(expireKey, storage, config);\n  }\n}\n\n/**\n * 获取缓存方法，根据环境可能为null\n * */\nfunction getStorageObj({ type }: InnerConf) {\n  if (typeof window === 'undefined') return null;\n\n  const map = {\n    session: window.sessionStorage,\n    local: window.localStorage,\n  };\n\n  return map[type] || null;\n}\n"],"names":["isFunction","isNumber","isObject","PREFIX","defaultConf","type","expireRefresh","cache","key","conf","config","expire","k","toUpperCase","expireKey","storage","getStorageObj","checkExpire","cacheMiddleware","bonus","init","_conf","cacheData","get","state","apis","subscribe","set","setExpire","cData","getItem","parseData","JSON","parse","val","cacheObj","testKey","Object","entries","forEach","v","setItem","stringify","exT","String","Date","now","Number","onExpire","removeItem","window","map","session","sessionStorage","local","localStorage"],"mappings":"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"}