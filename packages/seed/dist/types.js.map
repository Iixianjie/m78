{"version":3,"sources":["/Users/lixianjie/project/openSource/m78/packages/seed/src/types.ts"],"sourcesContent":["import { AnyObject } from '@lxjx/utils';\n\nexport type Share<S = any> = CreateSeedConfig<S> & {\n  listeners: Array<Listener>;\n};\n\nexport interface SetState<S = any> {\n  (patch: Partial<S>): void;\n}\n\nexport interface CoverSetState<S = any> {\n  (patch: S): void;\n}\n\nexport type Listener<S = AnyObject> = (changes: Partial<S>) => void;\n\nexport type Subscribe<S = AnyObject> = (listener: Listener<S>) => () => void;\n\n/**\n * seed instance\n *\n * seed实例\n * */\nexport interface Seed<S = any> {\n  /**\n   * update current state, only the key contained in the object is changed\n   *\n   * 更改当前state, 只会更改对象中包含的key\n   * */\n  set: SetState<S & { [key: string]: any }>;\n  /**\n   * overwrite the current state with the new state\n   *\n   * 以新state覆盖当前state\n   * */\n  coverSet: CoverSetState<S & { [key: string]: any }>;\n  /**\n   * subscribe to the state change, return the function used to unsubscribe the change subscription, receive the changed state(the original value passed by setState)\n   *\n   * 订阅state变更, 返回函数用于取消改订阅, 接收变更的state(setState传入的原始值)\n   * */\n  subscribe: Subscribe<S>;\n  /**\n   * get current state\n   *\n   * 获取当前的state\n   * */\n  get(): S;\n}\n\n/**\n * seed creation configuration\n *\n * seed的创建配置\n * */\nexport interface CreateSeedConfig<S = any> {\n  /**\n   * middleware\n   *\n   * 中间件 */\n  middleware?: (Middleware | null | undefined)[];\n  /**\n   * state\n   *\n   * 状态\n   * */\n  state?: S;\n}\n\n/**\n * 中间件初始化阶段的入参\n *\n * arg during the middleware initialization phase\n * */\nexport interface MiddlewareBonusInit {\n  /**\n   * whether or not this is the initialization phase\n   *\n   * 是否为初始化阶段\n   * */\n  init: true;\n  /**\n   * 当前创建配置(可能已被其他中间件修改过)\n   *\n   * current creation configuration (may have been modified by other middleware)\n   * */\n  config: CreateSeedConfig;\n  /**\n   * 在不同中间件中共享的对象，可以通过中间件特有的命名空间在其中存储数据\n   *\n   * objects shared in different middleware can store data in them through the unique namespace of the middleware\n   * */\n  ctx: AnyObject;\n}\n\n/**\n * 中间件补丁阶段的入参\n *\n * entry parameters of the middleware patch phase\n * */\nexport interface MiddlewareBonusPatch {\n  /**\n   * 是否为初始化阶段\n   *\n   * whether or not this is the initialization phase\n   * */\n  init: false;\n  /**\n   * current auth api (may have been modified by other middleware)\n   *\n   * 当前的auth api(可能已被其他中间件修改过)\n   * */\n  apis: Seed;\n  /**\n   * 为api添加增强补丁\n   *\n   * add enhanced patches to the api\n   * */\n  monkey: MonkeyHelper;\n  /**\n   * Objects shared in different middleware can store data in them through the unique namespace of the middleware\n   *\n   * 在不同中间件中共享的对象，可以通过中间件特有的命名空间在其中存储数据 */\n  ctx: AnyObject;\n}\n\n/**\n * optional api enhancement help tool\n *\n * 可选的api增强帮助工具\n * */\nexport interface MonkeyHelper {\n  <Name extends keyof Seed>(name: Name, cb: (next: Seed[Name]) => Seed[Name]): void;\n}\n\n/**\n * Middleware function. Used to enhance the api and modify the initial configuration\n *\n * 中间件函数。用于增强api、修改初始化配置\n * @param bonus -\n * various parameters provided for the middleware to enhance the api\n * 为中间件提供的各种用于增强api的参数\n *\n * @return <config | void> -\n * when in the initialization phase, the return value will be passed to the next api as the new config, and there is no return value in the non-initialization phase\n * 当处于初始化阶段时，返回值会作为新的config传递给下一个api, 非初始化阶段无返回值\n * */\nexport interface Middleware {\n  (bonus: MiddlewareBonusPatch | MiddlewareBonusInit): CreateSeedConfig | void;\n}\n\n/**\n * api creator\n *\n * 创建函数\n * */\nexport interface SeedCreator {\n  <S extends AnyObject = AnyObject>(conf?: CreateSeedConfig<S>): Seed<S>;\n}\n"],"names":[],"mappings":"AAAA,WA8JC"}