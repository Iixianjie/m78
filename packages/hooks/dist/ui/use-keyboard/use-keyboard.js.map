{"version":3,"sources":["/Users/lixianjie/project/openSource/m78/packages/hooks/src/ui/use-keyboard/use-keyboard.ts"],"sourcesContent":["import { useEffect, useMemo } from \"react\";\nimport { createRandString, getPlatform } from \"@m78/utils\";\n\n/** 支持的事件类型 */\nexport enum UseKeyboardTriggerType {\n  down = \"down\",\n  up = \"up\",\n}\n\nexport type UseKeyboardTriggerTypeKeys = keyof typeof UseKeyboardTriggerType;\n\n/** 支持的修饰键 */\nexport enum UseKeyboardModifier {\n  alt = \"alt\",\n  ctrl = \"ctrl\",\n  meta = \"meta\",\n  shift = \"shift\",\n  /** 特定于系统的控制建, mac上为command, win上位ctrl */\n  sysCmd = \"sysCmd\",\n}\n\nexport type UseKeyboardModifierKeys = keyof typeof UseKeyboardModifier;\n\n/** 事件回调 */\nexport type UseKeyboardCallback = (e: UseKeyboardEvent) => void;\n\n/** useKeyboard配置对象 */\nexport interface UseKeyboardOption {\n  /** 事件触发回调 */\n  onTrigger: UseKeyboardCallback;\n  /** 只有指定的按键按下触发 */\n  code?: string[];\n  /** 只有指定的修饰符按下触发 */\n  modifier?: Array<UseKeyboardModifier | UseKeyboardModifierKeys>;\n  /** true | 是否启用事件 */\n  enable?: boolean;\n  /** down | 触发的事件类型, press已被废弃故不提供 */\n  type?: UseKeyboardTriggerType | UseKeyboardTriggerTypeKeys;\n  /** 0 | 事件优先级, 越大则相对其他绑定越早触发 */\n  priority?: number;\n  /** true | 启用事件覆盖, 允许事件被更靠后注册的事件或更高优先级的同键位事件覆盖(由 修饰键 + 案件 标识唯一性) */\n  cover?: boolean;\n}\n\n/** useKeyboard事件对象 */\nexport interface UseKeyboardEvent {\n  /** 按下的物理键, 更关注按下的按键时使用 */\n  code: string;\n  /** 键入的字符, 更关注录入的字符时, 见 https://developer.mozilla.org/en-US/docs/Web/API/UI_Events/Keyboard_event_key_values */\n  key: string;\n  /** alt/option 是否被按下 */\n  altKey: boolean;\n  /** ctrl/control 是否被按下 */\n  ctrlKey: boolean;\n  /** win/command 是否被按下 */\n  metaKey: boolean;\n  /** shift 是否被按下 */\n  shiftKey: boolean;\n  /** 特定于系统的控制建, mac上为command, win上位ctrl */\n  sysCmdKey: boolean;\n  /** 是否由保持按住的事件触发 */\n  repeat: boolean;\n  /** 是否为合成事件 */\n  isComposing: boolean;\n  /** 触发类型 */\n  type: UseKeyboardTriggerType;\n  /** 浏览器原生事件 */\n  nativeEvent: KeyboardEvent;\n}\n\n/** 全局事件是否绑定, 延迟绑定, 以兼容ssr */\nlet init = false;\n/** 存放所有事件, 这样能在每一次render时快速通过hash更新事件的最新配置, 而不用进行遍历 */\nconst eventMap = new Map<string, Required<UseKeyboardOption>>();\n\n/** 映射浏览器事件名为hook特有的 */\nconst typeMapper = (type: string) => {\n  if (type === \"keydown\") return UseKeyboardTriggerType.down;\n  if (type === \"keyup\") return UseKeyboardTriggerType.up;\n};\n\n/** 所有hook共享一个全局事件 */\nfunction initBind() {\n  if (init) return;\n  init = true;\n\n  document.addEventListener(\"keydown\", handle);\n  document.addEventListener(\"keyup\", handle);\n}\n\nfunction handle(e: KeyboardEvent) {\n  const eventList = Array.from(eventMap.values()).reverse();\n\n  eventList.sort((a, b) => {\n    return b.priority - a.priority;\n  });\n\n  // 标记同键位事件是否调用过, key是 修饰键 + 按钮\n  const triggerFlags = new Map<string, boolean>();\n\n  const platform = getPlatform();\n\n  const event: UseKeyboardEvent = {\n    code: e.code,\n    key: e.key,\n    altKey: e.altKey,\n    ctrlKey: e.ctrlKey,\n    metaKey: e.metaKey,\n    shiftKey: e.shiftKey,\n    sysCmdKey: platform.mac ? e.metaKey : e.ctrlKey,\n    repeat: e.repeat,\n    isComposing: e.isComposing,\n    type: typeMapper(e.type) as UseKeyboardTriggerType, // handle只会被内部的两种事件触发,\n    nativeEvent: e,\n  };\n\n  // 共用一个事件对象, 防篡改\n  Object.freeze(event);\n\n  let flagKey = event.code;\n\n  if (event.altKey) flagKey += `+${UseKeyboardModifier.alt}`;\n  if (event.ctrlKey) flagKey += `+${UseKeyboardModifier.ctrl}`;\n  if (event.metaKey) flagKey += `+${UseKeyboardModifier.meta}`;\n  if (event.shiftKey) flagKey += `+${UseKeyboardModifier.shift}`;\n  if (event.sysCmdKey) flagKey += `+${UseKeyboardModifier.sysCmd}`;\n\n  eventList.forEach((opt) => {\n    if (!opt.enable) return;\n    if (opt.type !== event.type) return;\n    if (opt.code.length && !opt.code.includes(event.code)) return;\n    if (\n      opt.modifier.length &&\n      !opt.modifier.every((i) => flagKey.includes(`+${i}`))\n    ) {\n      return;\n    }\n\n    if (opt.cover && triggerFlags.get(flagKey)) return;\n\n    opt.onTrigger(event);\n\n    triggerFlags.set(flagKey, true);\n  });\n}\n\n/** 默认配置 */\nconst defaultOption = {\n  enable: true,\n  type: UseKeyboardTriggerType.down,\n  priority: 0,\n  cover: true,\n  code: [],\n  modifier: [],\n};\n\n/**\n * 订阅键盘事件\n * - 此hook主要目的是简化按键事件的绑定和分派, 不处理兼容性, 如果需要兼容旧的浏览器, 需要自行处理兼容\n * - 订阅时间越晚的事件越先触发\n * */\nexport function useKeyboard(option: UseKeyboardOption) {\n  const opt: Required<UseKeyboardOption> = {\n    ...defaultOption,\n    ...option,\n  };\n\n  useMemo(() => initBind(), []);\n\n  /** 事件的唯一id */\n  const eventId = useMemo(() => createRandString(), []);\n\n  // 实时更新事件对象\n  eventMap.set(eventId, opt);\n\n  // 清理\n  useEffect(() => {\n    return () => {\n      eventMap.delete(eventId);\n    };\n  }, []);\n}\n"],"names":["useEffect","useMemo","createRandString","getPlatform","UseKeyboardTriggerType","down","up","UseKeyboardModifier","alt","ctrl","meta","shift","sysCmd","init","eventMap","Map","typeMapper","type","initBind","document","addEventListener","handle","e","eventList","Array","from","values","reverse","sort","a","b","priority","triggerFlags","platform","event","code","key","altKey","ctrlKey","metaKey","shiftKey","sysCmdKey","mac","repeat","isComposing","nativeEvent","Object","freeze","flagKey","forEach","opt","enable","length","includes","modifier","every","i","cover","get","onTrigger","set","defaultOption","useKeyboard","option","eventId","delete"],"mappings":"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"}