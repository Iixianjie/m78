{"version":3,"sources":["/Users/lixianjie/project/openSource/m78/packages/request/src/interfaces.ts"],"sourcesContent":["import { Plugin } from \"./plugin\";\nimport { Response } from \"./response\";\nimport { ResponseError } from \"./response-error\";\n\n/**\n * request配置必须遵循的一些字段名, 如果使用请求库与此接口不匹配, 需要在`fetchAdapter`中进行手动桥接\n * - <Ext> 如果指定，会用于扩展extraOption的类型, 当你想要自定义额外的配置时使用(比如你可以扩展extraOption.loading然后在start和finish中进行对应处理)\n * */\nexport interface BaseRequestOptions<Ext = {}> {\n  /** 请求地址 */\n  url: string;\n  /** 请求体 */\n  body?: any;\n  /** 请求参数  */\n  query?: any;\n  /** 请求头, 默认请求类型为 application/json */\n  headers?: any;\n  /** 额外扩展配置 */\n  extraOption?: {\n    /** 为true时即使返回服务器状态码正确依然会以服务器返回的消息(根据messageField配置项确定)作为反馈提示 */\n    useServeFeedBack?: boolean;\n    /** 静默模式，无论正确与否不会有任何提示 */\n    quiet?: boolean;\n    /** 默认会返回经过format处理的结果，为true时返回原始的response */\n    plain?: boolean;\n    /** 自定义请求成功的提示, 会覆盖其他根据配置生成的提示消息 */\n    successMessage?: string;\n    /** 传递其他自定义配置, 并在各种钩子和插件中访问 */\n    [key: string]: any;\n  } & Ext;\n}\n\n/**\n * 请求方法, 根据成功/失败来设置promise的状态\n * 错误分为两种:\n *  1. 常规错误。跨域，网络错误、请求链接等错误，根据配置的fetchAdapter会有所不同\n *  2. 服务器错误。状态码异常、checkStatus未通过等，此时Error对象会包含一个response字段，为服务器返回数据\n * */\nexport interface Request<Opt> {\n  <Data = any>(url: string, options?: Omit<Opt, \"url\">): Promise<Data>;\n}\n\n/** 基础配置，支持在createInstance和request(opt.extraOption)时配置，后者配置会覆盖前者 */\nexport interface Options<Opt> {\n  /** 接收服务器response，返回一个boolean值用于判定该次请求是否成功(状态码等在内部已处理，只需要关心服务器实际返回的data) */\n  checkStatus?(data: any): boolean;\n\n  /** 用来从服务端请求中提取提示文本的字段 */\n  messageField?: string;\n\n  /**\n   * 用于向用户提供反馈\n   * @param message - 反馈消息\n   * @param status - 反馈状态: true成功, false失败\n   * @param option - 请求配置\n   * @param response - 请求响应\n   * */\n  feedBack?(\n    message: string,\n    status: boolean,\n    option: Opt,\n    response?: Response\n  ): void;\n\n  /** 将response格式化为自己想要的格式后返回, 会在所有插件执行完毕后执行  */\n  format?(response: Response, option: Opt): any;\n\n  /** 请求开始 */\n  start?(requestConfig: Opt): any;\n\n  /** 请求结束, flag是start hook的返回值, 通常为从start中返回的loading等的关闭标识 */\n  finish?(requestConfig: Opt, flag?: any): void;\n\n  /** 请求失败 */\n  error?(resError: ResponseError, option: Opt): void;\n\n  /** 请求成功 */\n  success?(data: any, response: Response, option: Opt): void;\n}\n\n/** 创建request实例时的配置 */\nexport interface CreateOptions<Opt> extends Options<Opt> {\n  /**\n   * 请求适配器, 收配置并返回promise的函数, 默认使用fetch进行请求\n   * - 配置包含BaseRequestOptions中的几个必要字段, 如果使用的请求库不符合这些字段名配置，需要手动抹平\n   * - 如果请求成功, 解析Response对象\n   * - 如果请求失败, 需要抛出ResponseError类型的错误\n   * */\n  adapter: (options: Opt) => Promise<Response>;\n  /** 传递给Request的默认配置，会在请求时深合并到请求配置中 */\n  baseOptions?: Partial<Opt>;\n  /** 插件 */\n  plugins?: Array<typeof Plugin>;\n}\n"],"names":[],"mappings":"AAAA,WA6FC"}